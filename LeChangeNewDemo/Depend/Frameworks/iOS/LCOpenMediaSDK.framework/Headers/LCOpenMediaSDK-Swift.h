// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef LCOPENMEDIASDK_SWIFT_H
#define LCOPENMEDIASDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <LCOpenMediaSDK/LCOpenMediaSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LCOpenMediaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// 传入路径类型
typedef SWIFT_ENUM(NSInteger, LCFilePathType, open) {
  LCFilePathTypeSnapShot = 0,
  LCFilePathTypeRecord = 1,
};


SWIFT_CLASS("_TtC14LCOpenMediaSDK28LCMediaDoubleCamWindowConfig")
@interface LCMediaDoubleCamWindowConfig : NSObject
@property (nonatomic) CGFloat surfaceRatio;
@property (nonatomic) NSInteger windowOrder;
@property (nonatomic) CGFloat topMargin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// 双目窗口间隙样式配置
SWIFT_CLASS("_TtC14LCOpenMediaSDK30LCMediaDoubleCameraSpaceConfig")
@interface LCMediaDoubleCameraSpaceConfig : NSObject
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic) CGFloat spaceHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 指哪看哪坐标
SWIFT_CLASS("_TtC14LCOpenMediaSDK17LCMediaWatchPoint")
@interface LCMediaWatchPoint : NSObject
@property (nonatomic) NSInteger channelId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// 指哪看哪样式配置
SWIFT_CLASS("_TtC14LCOpenMediaSDK23LCMediaWatchPointConfig")
@interface LCMediaWatchPointConfig : NSObject
@property (nonatomic, strong) UIImage * _Nullable normalPointImage;
@property (nonatomic, strong) UIImage * _Nullable selectPointImage;
@property (nonatomic, strong) UIColor * _Nullable normalLineColor;
@property (nonatomic, strong) UIColor * _Nullable selectedLineColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LCOpenMediaLivePlugin;
@class UITapGestureRecognizer;
@class UISwipeGestureRecognizer;
@class UIView;

SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK35LCOpenMediaLiveAssistWindowDelegate_")
@protocol LCOpenMediaLiveAssistWindowDelegate <NSObject>
/// 单击手势响应回调（辅助窗口）
/// \param livePlugin 预览组件
///
/// \param gesture 单击手势
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin doSingleTapWith:(UITapGestureRecognizer * _Nonnull)gesture;
/// 双击手势响应回调（辅助窗口）
/// \param livePlugin 预览组件
///
/// \param gesture 双击手势
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin doDoubleTapWith:(UITapGestureRecognizer * _Nonnull)gesture;
/// 左滑手势（辅助窗口）
/// \param livePlugin 预览插件
///
/// \param gesture 左滑手势
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin doLeftSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture;
/// 右滑手势（辅助窗口）
/// \param livePlugin 预览插件
///
/// \param gesture 优化手势
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin doRightSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture;
/// 上滑手势（辅助窗口）
/// \param livePlugin 预览插件
///
/// \param isMainWindow 是否是主窗口
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin doUpSwipe:(BOOL)isMainWindow;
/// 下滑手势（辅助窗口）
/// \param livePlugin 预览插件
///
/// \param isMainWindow 是否是主窗口
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin doDownSwipe:(BOOL)isMainWindow;
/// 小屏边界颜色设置
/// \param livePlugin 预览插件
///
/// \param littleWindowBorderColor 暂无含义
///
///
/// returns:
/// 小屏边界颜色
- (UIColor * _Nullable)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin littleWindowBorderColor:(id _Nullable)littleWindowBorderColor SWIFT_WARN_UNUSED_RESULT;
/// 大小屏模式状态变更
/// \param livePlugin 预览插件
///
/// \param isAssistWindowPip 是否是辅助窗口
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin isAssistWindowPip:(BOOL)isAssistWindowPip;
/// 小窗移动位置回调
/// \param livePlugin 预览插件
///
/// \param location 小窗位置象限
///
- (void)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin subWindow:(LCCastQuadrant)location;
/// 设置播放器背景图层
/// \param livePlugin 预览插件
///
/// \param isMainWindow 是否是主窗口
///
///
/// returns:
/// 播放器背景图层
- (UIView * _Nullable)assistWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin isMainWindow:(BOOL)isMainWindow SWIFT_WARN_UNUSED_RESULT;
@end

@class LCBaseVideoItem;
@class NSString;

SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK23LCOpenMediaLiveDelegate_")
@protocol LCOpenMediaLiveDelegate <NSObject>
/// 开始播放
/// \param livePlugin 多窗口预览组件
///
- (void)onPlaySuccess:(LCBaseVideoItem * _Nonnull)videoItem;
/// 开始拉流
/// \param livePlugin 多窗口预览组件
///
- (void)onPlayLoading:(LCBaseVideoItem * _Nonnull)videoItem;
/// 停止播放
/// \param livePlugin 多窗口预览组件
///
- (void)onPlayStop:(LCBaseVideoItem * _Nonnull)videoItem saveLastFrame:(BOOL)saveLastFrame;
/// 播放失败回调
/// \param videoError 错误码
///
/// \param type 错误类型
///
/// \param errorInfo 错误描述
///
/// \param videoItem 播放基础参数
///
- (void)onPlayFailureWithVideoError:(NSString * _Nonnull)videoError type:(NSString * _Nonnull)type videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
@optional
/// 码流回调信息
/// \param livePlugin 多窗口预览组件
///
/// \param videoCode 码流信息码
///
/// \param streamInfo 码流信息，json格式，如{“proto”:“live_count_down”, “countDownTime”:12, “desc”:“devices will sleep after 12s”}
///
- (void)onStreamInfoWithVideoError:(NSString * _Nonnull)videoError type:(NSString * _Nonnull)type streamInfo:(NSString * _Nullable)streamInfo videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// \param livePlugin 多窗口预览组件
///
- (void)onRecordStart:(LCBaseVideoItem * _Nonnull)videoItem;
/// 录制结束回调
/// \param livePlugin 多窗口预览组件
///
- (void)onRecordFinish:(LCBaseVideoItem * _Nonnull)videoItem paths:(NSDictionary<NSNumber *, NSString *> * _Nonnull)paths;
/// 播放码率
/// \param livePlugin 多窗口预览组件
///
/// \param byte 码率(单位:bit)
///
- (void)onReceiveDataWithByteRate:(NSInteger)byte videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// 设置状态层View
/// \param livePlugin 多窗口预览组件
///
- (UIView * _Nullable)viewForStateLayer:(LCOpenMediaLivePlugin * _Nonnull)livePlugin SWIFT_WARN_UNUSED_RESULT;
/// 设置工具层View
/// \param livePlugin 多窗口预览组件
///
- (UIView * _Nullable)viewForToolLayer:(LCOpenMediaLivePlugin * _Nonnull)livePlugin SWIFT_WARN_UNUSED_RESULT;
/// 云台限位  direh代表左右方向 dires代表上下方向
- (void)onIVSInfo:(LCBaseVideoItem * _Nonnull)videoItem direh:(DHPtzDirection)lDireh dires:(DHPtzDirection)lDires;
/// 电子放大比例变化
/// \param livePlugin 单窗口预览组件
/// <ul>
///   <li>
///     EZoom: 电子放大当前比例
///   </li>
/// </ul>
///
- (void)onEZoomChanged:(CGFloat)scale with:(LCBaseVideoItem * _Nonnull)videoItem;
/// 云台旋转角度变化
/// \param livePlugin 多窗口预览组件
///
/// \param rotationDirection 旋转方向: 1 - 左右转向，值取左右转向位置；2 – 上下转向，值取上下转向位置；
///
/// \param horizontalAngle 水平角度, 范围(-1, 1)
///
/// \param verticalAngle 垂直角度, 范围(-1, 1)
///
- (void)onPtzAngleChangedWithRotationDirection:(NSInteger)rotationDirection horizontalAngle:(CGFloat)horizontalAngle verticalAngle:(CGFloat)verticalAngle;
/// 网络状态监听
/// \param livePlugin 多窗口预览组件
///
/// \param networkStatus 0-弱网    非0-非弱网
///
- (void)onNetStatus:(NSInteger)networkStatus;
/// 辅助帧回调
- (void)onAssistFrameInfoWithJsonDic:(NSDictionary<NSString *, id> * _Nonnull)jsonDic;
- (void)onSoundChanged:(BOOL)isAudioOpen;
- (NSString * _Nonnull)configFilePathWithCid:(NSInteger)cid fileType:(enum LCFilePathType)fileType SWIFT_WARN_UNUSED_RESULT;
- (void)onSnapPicFail;
- (void)onSnapPicSuccessWithPaths:(NSDictionary<NSNumber *, NSString *> * _Nonnull)paths;
- (void)onRecordFail;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK30LCOpenMediaLiveGestureDelegate_")
@protocol LCOpenMediaLiveGestureDelegate <NSObject>
@optional
/// 单击手势响应回调
/// \param livePlugin 单窗口预览组件
///
/// \param gesture 单击手势
///
- (void)onSingleClick:(UITapGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 双击手势响应回调
/// \param livePlugin 单窗口预览组件
///
/// \param gesture 双击手势
///
- (void)onDoubleClick:(UITapGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 左滑手势
- (void)onLeftSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 右滑手势
- (void)onRightSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 上滑手势
- (void)onUpSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 下滑手势
- (void)onDownSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK32LCOpenMediaLiveLogReportDelegate_")
@protocol LCOpenMediaLiveLogReportDelegate <NSObject>
- (void)openMediaLiveLogReportOnDataAnalysis:(NSDictionary * _Nullable)realStreamData with:(LCBaseVideoItem * _Nonnull)videoItem;
- (void)openMediaLiveLogReportOnStreamLogInfo:(NSString * _Nullable)message with:(LCBaseVideoItem * _Nonnull)videoItem;
- (void)openMediaLiveLogReportOnProgressStatus:(NSString * _Nullable)requestID status:(NSString * _Nullable)status time:(NSString * _Nullable)time with:(LCBaseVideoItem * _Nonnull)videoItem;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK32LCOpenMediaLiveMultiviewDelegate_")
@protocol LCOpenMediaLiveMultiviewDelegate <NSObject>
/// 屏幕模式变化/大小屏切换
/// \param livePlugin 实时插件
///
/// \param screenMode 切换后模式
///
/// \param littleWindowId 大小屏切换
///
- (void)multiviewWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin changed:(LCScreenMode)screenMode littleWindowId:(NSInteger)littleWindowId;
/// 小窗边缘色值设置
/// \param livePlugin 实时插件
///
/// \param littleWindowBorderColor 暂无含义
///
///
/// returns:
/// 小窗边缘色值
- (UIColor * _Nullable)multiviewWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin littleWindowBorderColor:(id _Nullable)littleWindowBorderColor SWIFT_WARN_UNUSED_RESULT;
/// 小窗位置变化回调
/// \param livePlugin 实时插件
///
/// \param changedLocation 小窗当前位置象限
///
- (void)multiviewWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin subWindow:(LCCastQuadrant)changedLocation;
/// 设置每个播放窗口覆盖图层（用来展示每个窗口业务信息）
/// \param livePlugin 实时插件
///
/// \param isMainWindow 是否是主窗口（默认通道0为主窗口）
///
///
/// returns:
/// 播放窗口覆盖图层
- (UIView * _Nullable)multiviewWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin bgViewWith:(BOOL)isMainWindow SWIFT_WARN_UNUSED_RESULT;
/// 上下双屏模式下窗口间隙配置
/// \param livePlugin 实时插件
///
///
/// returns:
/// 间隙配置
- (LCMediaDoubleCameraSpaceConfig * _Nullable)multiviewWindowSpaceConfig:(LCOpenMediaLivePlugin * _Nonnull)livePlugin SWIFT_WARN_UNUSED_RESULT;
/// 窗口配置
/// \param livePlugin 实时插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 窗口配置
- (LCMediaDoubleCamWindowConfig * _Nullable)multiviewWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin windowConfigWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;

SWIFT_CLASS("_TtC14LCOpenMediaSDK21LCOpenMediaLivePlugin")
@interface LCOpenMediaLivePlugin : UIView
@property (nonatomic) LCScreenMode screenMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



@interface LCOpenMediaLivePlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 更新小窗展示位置(仅支持上下左右4个角)
/// \param location 窗口位置枚举值
///
- (void)setQuadrant:(LCCastQuadrant)location;
/// 重新加载窗口配置并刷新UI
- (void)reloadWindowConfig;
/// 是否显示画中画小屏
/// \param show 是否显示
///
/// \param animate 是否动画
///
- (void)showLittleScreenWithShow:(BOOL)show animate:(BOOL)animate;
/// 改变画中画模式小窗距离左侧的偏移
/// \param offset 偏移量
///
- (void)setMargin:(UIEdgeInsets)edge;
@end


@interface LCOpenMediaLivePlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 放大某个小窗
/// \param channelId 通道号
///
- (void)showSubPlayWindowLargeScreen:(NSInteger)cid;
/// 重置小窗展示模式,去除小窗放大效果
- (void)resetSubPlayWindowMode;
@end


@interface LCOpenMediaLivePlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 是否支持辅助窗口展示
/// \param isEnabled 是否支持
///
- (void)setAssistWindowEnabed:(BOOL)isEnabled;
/// 获取当前是否支持辅助窗口展示
///
/// returns:
/// 是否支持
- (BOOL)getAssistWindowEnabled SWIFT_WARN_UNUSED_RESULT;
/// 开启自动跟踪
/// \param trackType 跟踪类型,详见枚举定义
///
///
/// returns:
/// 是否开启成功
- (BOOL)startAutoTrackWithTrackType:(LCMediaAutoTrackType)trackType senceType:(BOOL)senceType SWIFT_WARN_UNUSED_RESULT;
/// 关闭自动跟踪
///
/// returns:
/// 是否关闭成功
- (BOOL)stopAutoTrack SWIFT_WARN_UNUSED_RESULT;
/// 切换自动跟踪视频流窗口
///
/// returns:
/// 是否切换成功
- (void)switchAutoTrackStream;
/// 设置自动追踪默认位置
/// \param center 中心点坐标
///
/// \param areaSize 区域大小
///
- (void)setAutoTrackDefaultAreaWithCenter:(CGPoint)center areaSize:(CGSize)areaSize;
@end







@protocol LCOpenMediaLiveThreeCameraDelegate;
@class LCOpenLiveSource;

@interface LCOpenMediaLivePlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 设置播放监听
/// \param listener 监听者
///
- (void)setPlayerListener:(id <LCOpenMediaLiveDelegate> _Nonnull)listener;
/// 设置播放器手势监听
/// \param listener 监听者
///
- (void)setGestureListener:(id <LCOpenMediaLiveGestureDelegate> _Nonnull)listener;
/// 设置日志上报监听
/// \param listener 监听者
///
- (void)setLogReportListener:(id <LCOpenMediaLiveLogReportDelegate> _Nonnull)listener;
/// 设置辅助窗口事件监听
/// \param listener 监听者
///
- (void)setAssistWindowListener:(id <LCOpenMediaLiveAssistWindowDelegate> _Nonnull)listener;
- (void)setMultiviewWindowListener:(id <LCOpenMediaLiveMultiviewDelegate> _Nonnull)listener;
- (void)setThreeCameraListener:(id <LCOpenMediaLiveThreeCameraDelegate> _Nonnull)listener;
/// 播放
/// \param item 视频源信息
///
- (void)playRtspRealWith:(LCOpenLiveSource * _Nonnull)videoSource;
/// 停止播放
/// \param saveLastFrame 是否保留最后一帧(true:保留, false:不保留)
///
- (void)stopRtspReal:(BOOL)saveLastFrame;
/// 继续播放(即将休眠时调用会唤醒设备并继续播放,非播放状态下调用会触发重新拉流)
/// \param windowId 窗口ID
///
- (void)continuePlay;
/// 开启音频
/// \param isCallBack 是否需要回调
///
- (void)playAudioWithIsCallback:(BOOL)isCallback;
/// 关闭音频
/// \param isCallBack 是否需要回调
///
- (void)stopAudioWithIsCallback:(BOOL)isCallback;
/// 截图
/// \param path 截图保存路径
///
- (void)snapShotWithIsCallback:(BOOL)isCallback;
/// 开始录制视频
/// \param path 录制的视频保存的路径
///
- (void)startRecord;
/// 停止录制视频
- (void)stopRecord;
- (void)recoverEZoomWithCid:(NSInteger)cid;
- (void)recoverEZooms;
- (CGFloat)getEZoomScaleWithCid:(NSInteger)cid SWIFT_WARN_UNUSED_RESULT;
/// 开启/关闭渲染
/// \param enable true:开启 , false:关闭
///
- (void)renderVideoWithEnable:(BOOL)enable;
/// 是否正在录制
///
/// returns:
/// true:正在录制, false:未录制
- (BOOL)isRecording SWIFT_WARN_UNUSED_RESULT;
/// 获取当前播放状态
///
/// returns:
/// 播放状态
- (LCPlayStatus)getPlayState SWIFT_WARN_UNUSED_RESULT;
- (void)configSupportGesture:(LCPlayerSupportGestureType)gestureType;
/// 销毁播放资源(用于资源释放时)
- (void)uninitPlayWindow;
- (void)configPlayerType:(LCMediaPlayerType)playerType;
/// 是否支持电子放大
/// \param isSupport 是否支持
///
- (void)supportGestureZoom:(BOOL)isSupport;
/// 获取当前拉流类型
///
/// returns:
/// 拉流类型(MTS, P2P, Local, relay)
- (LCVideoStreamMode)getCurrentStreamMode SWIFT_WARN_UNUSED_RESULT;
@end





SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK34LCOpenMediaLiveThreeCameraDelegate_")
@protocol LCOpenMediaLiveThreeCameraDelegate <NSObject>
/// 模式切换
/// \param livePlugin 实时插件
///
/// \param screenMode 当前模式
///
- (void)threeCameraWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin changed:(LCScreenMode)screenMode;
/// 小窗切换
/// \param livePlugin 实时插件
///
/// \param isMainWindowPip 主窗口是否是小窗（默认0通道为主窗口）
///
- (void)threeCameraWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin isMainWindowPip:(BOOL)isMainWindowPip;
/// 小屏边界颜色设置
/// \param livePlugin 实时插件
///
/// \param littleWindowBorderColor 暂无含义
///
///
/// returns:
/// 小屏边界颜色
- (UIColor * _Nullable)threeCameraWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin littleWindowBorderColor:(id _Nullable)littleWindowBorderColor SWIFT_WARN_UNUSED_RESULT;
/// 小窗位置变化回调
/// \param livePlugin 实时插件
///
/// \param changedLocation 小窗位置象限
///
- (void)threeCameraWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin subWindow:(LCCastQuadrant)changedLocation;
/// 设置播放器背景图层
/// \param livePlugin 实时插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 每个窗口覆盖图层
- (UIView * _Nullable)threeCameraWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin bgViewWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
/// 窗口配置
/// \param livePlugin 实时插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 窗口配置
- (LCMediaDoubleCamWindowConfig * _Nullable)threeCameraWindow:(LCOpenMediaLivePlugin * _Nonnull)livePlugin windowConfigWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
/// 指哪看哪配置
/// \param livePlugin 实时插件
///
///
/// returns:
/// 配置信息
- (LCMediaWatchPointConfig * _Nullable)watchPointConfig:(LCOpenMediaLivePlugin * _Nonnull)livePlugin SWIFT_WARN_UNUSED_RESULT;
/// 指哪看哪坐标回调
/// \param player 播放插件
///
/// \param touchPoint 坐标点(以(8191, 8191)坐标为基准)
///
/// \param channelId 通道号
///
- (void)watchPointConfig:(LCOpenMediaLivePlugin * _Nonnull)livePlugin watchPoint:(CGPoint)touchPoint channelId:(NSInteger)channelId;
/// 配置画中画模式,主窗口是否是大窗
/// \param player 播放插件
///
///
/// returns:
/// 主窗口是否是大窗
- (BOOL)mainWindowIsLargeScreen:(LCOpenMediaLivePlugin * _Nonnull)livePlugin SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14LCOpenMediaSDK23LCOpenMediaRecordPlugin")
@interface LCOpenMediaRecordPlugin : UIView
@property (nonatomic) LCScreenMode screenMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@interface LCOpenMediaRecordPlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 配置窗口模式
/// \param showMode 窗口模式
///
- (void)configFishEyeWindowMode:(LCMediaFishEyeWindowShowMode)showMode;
/// 配置镂空圆形遮罩背景色
/// \param color 背景色(不配置默认黑色)
///
- (void)configFishEyeMaskColor:(UIColor * _Nullable)color;
@end






@interface LCOpenMediaRecordPlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 更新小窗展示位置(仅支持上下左右4个角)
/// \param location 窗口位置枚举值
///
- (void)setQuadrant:(LCCastQuadrant)location;
/// 是否显示画中画小屏
/// \param show 是否显示
///
/// \param animate 是否动画
///
- (void)showLittleScreenWithShow:(BOOL)show animate:(BOOL)animate;
/// 改变画中画模式小窗距离左侧的偏移
/// \param offset 偏移量
///
- (void)setMargin:(UIEdgeInsets)edge;
/// 放大某个小窗
/// \param channelId 通道号
///
- (void)showSubPlayWindowLargeScreen:(NSInteger)cid;
/// 重置小窗展示模式,去除小窗放大效果
- (void)resetSubPlayWindowMode;
@end










@protocol LCRecordPluginDelegate;
@protocol LCRecordPluginGestureDelegate;
@protocol LCRecordPluginLogReportDelegate;
@protocol LCRecordDoubleCamWindowDelegate;
@protocol LCRecordThreeCamWindowDelegate;
@protocol LCRecordCombinFishEyeDelegate;

@interface LCOpenMediaRecordPlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 设置播放监听
/// \param listener 监听者
///
- (void)setPlayerListener:(id <LCRecordPluginDelegate> _Nonnull)listener;
/// 设置手势监听
/// \param listener 监听者
///
- (void)setGestureListener:(id <LCRecordPluginGestureDelegate> _Nonnull)listener;
/// 设置日志上报监听
/// \param listener 监听者
///
- (void)setLogReportListener:(id <LCRecordPluginLogReportDelegate> _Nonnull)listener;
- (void)setDoubleCamListener:(id <LCRecordDoubleCamWindowDelegate> _Nonnull)listener;
- (void)setThreeCamListener:(id <LCRecordThreeCamWindowDelegate> _Nonnull)listener;
- (void)setFishEyeListener:(id <LCRecordCombinFishEyeDelegate> _Nonnull)listener;
/// 播放
/// \param item 视频源信息
///
- (void)playRecordStreamWith:(LCBaseVideoItem * _Nonnull)item;
/// 获取当前播放状态
///
/// returns:
/// 播放状态
- (LCPlayStatus)getPlayState SWIFT_WARN_UNUSED_RESULT;
/// 暂停
- (void)pauseAsync;
/// 继续播放
- (void)resumeAsync;
/// seek到某个时间点播放
/// \param offsetTime 偏移时间
///
- (void)seek:(NSInteger)offsetTime;
/// 唤醒设备并继续拉流(用于休眠倒计时唤醒设备并继续拉流)
- (void)continuePlay;
- (void)playAudioWithIsCallback:(BOOL)isCallback;
- (void)stopAudioWithIsCallback:(BOOL)isCallback;
/// 停止播放
/// \param saveLastFrame 是否保留最后一帧(true:保留, false:不保留)
///
- (void)stopRecordStream:(BOOL)saveLastFrame;
/// 截图
/// \param path 截图保存路径
///
- (void)snapShotWithIsCallback:(BOOL)isCallback;
/// 开始录制视频
/// \param path 录制的视频保存的路径
///
- (void)startRecord;
/// 停止录制视频
- (void)stopRecord;
/// 是否正在录制
///
/// returns:
/// true:正在录制, false:未录制
- (BOOL)isRecording SWIFT_WARN_UNUSED_RESULT;
/// 设置播放倍速
/// \param speed 倍速
///
- (void)setPlaySpeed:(CGFloat)speed;
- (void)recoverEZoomWithCid:(NSInteger)cid;
- (void)recoverEZooms;
- (CGFloat)getEZoomScaleWithCid:(NSInteger)cid SWIFT_WARN_UNUSED_RESULT;
/// 开启/关闭渲染
/// \param enable true:开启 , false:关闭
///
- (void)renderVideoWithEnable:(BOOL)enable;
- (CGFloat)getPlaySpeed SWIFT_WARN_UNUSED_RESULT;
/// 设置解码类型(软解码/硬解码),默认为硬解码
- (void)configEngineWithDecode:(LCPlayerDecodeType)type;
/// 销毁播放资源(用于资源释放时)
- (void)uninitPlayWindow;
- (void)configPlayerType:(LCMediaPlayerType)playerType;
/// 获取当前拉流类型
///
/// returns:
/// 拉流类型(MTS, P2P, Local, relay)
- (LCVideoStreamMode)getCurrentStreamMode SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK29LCRecordCombinFishEyeDelegate_")
@protocol LCRecordCombinFishEyeDelegate <NSObject>
/// OSD时间回调
/// \param player 播放插件
///
/// \param osdTime OSD时间,格式(yyyy-MM-dd HH:mm:ss)
///
- (void)fishEye:(LCOpenMediaRecordPlugin * _Nonnull)plugin osdTime:(NSString * _Nonnull)osdTime;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK31LCRecordDoubleCamWindowDelegate_")
@protocol LCRecordDoubleCamWindowDelegate <NSObject>
/// 设置双目画中画模式小窗边框颜色
/// \param plugin 组合插件
///
/// \param littleWindowBorderColor nil
///
///
/// returns:
/// 小窗边框颜色
- (UIColor * _Nullable)recordPlugin:(LCOpenMediaRecordPlugin * _Nonnull)plugin littleWindowBorderColor:(id _Nullable)littleWindowBorderColor SWIFT_WARN_UNUSED_RESULT;
/// 画中画模式时,小窗切换
/// \param plugin 组合插件
///
/// \param channelId 切换后小窗视频通道号
///
- (void)recordPlugin:(LCOpenMediaRecordPlugin * _Nonnull)plugin changed:(LCScreenMode)screenMode littleWindow:(NSInteger)channelId;
/// 画中画模式,小窗位置移动
/// \param plugin 组合插件
///
/// \param location 小窗移动后位置
///
- (void)recordPlugin:(LCOpenMediaRecordPlugin * _Nonnull)plugin subWindow:(LCCastQuadrant)location;
/// 设置播放器背景图层
/// \param plugin 组合插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 播放窗口覆盖图层
- (UIView * _Nullable)recordPlugin:(LCOpenMediaRecordPlugin * _Nonnull)plugin bgViewWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
/// 上下双屏模式下窗口间隙配置
/// \param plugin 组合插件
///
///
/// returns:
/// 配置项
- (LCMediaDoubleCameraSpaceConfig * _Nullable)videoWindowSpaceConfig:(LCOpenMediaRecordPlugin * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
/// 窗口配置
/// \param livePlugin 组合插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 配置项
- (LCMediaDoubleCamWindowConfig * _Nullable)recordPlugin:(LCOpenMediaRecordPlugin * _Nonnull)livePlugin windowConfigWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK22LCRecordPluginDelegate_")
@protocol LCRecordPluginDelegate <NSObject>
/// 开始播放
/// \param videoItem 播放基础参数
///
- (void)onPlaySuccess:(LCBaseVideoItem * _Nonnull)videoItem;
/// 开始拉流
/// \param videoItem 播放基础参数
///
- (void)onPlayLoading:(LCBaseVideoItem * _Nonnull)videoItem;
/// 暂停播放
/// \param videoItem 播放基础参数
///
- (void)onPlayPaused:(LCBaseVideoItem * _Nonnull)videoItem;
/// 停止播放
/// \param videoItem 播放基础参数
///
/// \param saveLastFrame 是否保留最后一帧
///
- (void)onPlayStop:(LCBaseVideoItem * _Nonnull)videoItem saveLastFrame:(BOOL)saveLastFrame;
/// 播放完成
/// \param videoItem 播放基础参数
///
- (void)onPlayFinished:(LCBaseVideoItem * _Nonnull)videoItem;
/// 录制开始回调
/// \param videoItem 播放基础参数
///
- (void)onRecordStart:(LCBaseVideoItem * _Nonnull)videoItem;
/// 录制结束回调
/// \param videoItem 播放基础参数
///
/// \param paths 文件保存路径。格式：[通道号：文件保存路径]
///
- (void)onRecordFinish:(LCBaseVideoItem * _Nonnull)videoItem paths:(NSDictionary<NSNumber *, NSString *> * _Nonnull)paths;
/// 播放失败回调
/// \param videoError 错误码
///
/// \param type 错误类型
///
/// \param errorInfo 错误信息，json格式
///
/// \param videoItem 播放基础参数
///
- (void)onPlayFailureWithVideoError:(NSString * _Nonnull)videoError type:(NSString * _Nonnull)type videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// 码流信息回调
/// \param videoError 码流信息码
///
/// \param type 错误类型
///
/// \param streamInfo 码流信息，json格式，如{“proto”:“live_count_down”, “countDownTime”:12, “desc”:“devices will sleep after 12s”}
///
/// \param videoItem 播放基础参数
///
- (void)onStreamInfoWithVideoError:(NSString * _Nonnull)videoError type:(NSString * _Nonnull)type streamInfo:(NSString * _Nullable)streamInfo videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// 播放码率
/// \param videoItem 播放基础参数
///
/// \param byte 码率(单位:bit)
///
- (void)onReceiveDataWithByteRate:(NSInteger)byte videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// 播放时间
/// \param videoItem 播放基础参数
///
/// \param playTime 播放时间
///
- (void)onPlayerTime:(NSTimeInterval)playTime videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// 倍速变化回调
/// \param videoItem 播放基础参数
///
/// \param speed 变化后倍速
///
- (void)onPlaySpeedChange:(CGFloat)speed videoItem:(LCBaseVideoItem * _Nonnull)videoItem;
/// 设置状态层View
/// \param videoController 录像播放组件
///
- (UIView * _Nullable)viewForStateLayer:(LCOpenMediaRecordPlugin * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
/// 设置工具层View
/// \param videoController 录像播放组件
///
- (UIView * _Nullable)viewForToolLayer:(LCOpenMediaRecordPlugin * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
/// 电子放大比例变化
/// \param videoItem 播放基础参数
/// <ul>
///   <li>
///     EZoom: 电子放大当前比例
///   </li>
/// </ul>
///
- (void)onEZoomChanged:(CGFloat)scale with:(LCBaseVideoItem * _Nonnull)videoItem;
/// 码流辅助信息回调
/// \param jsonDic 辅助信息
///
- (void)onAssistFrameInfoWithJsonDic:(NSDictionary<NSString *, id> * _Nonnull)jsonDic;
/// 音频开关状态回调
/// \param isAudioOpen 伴音状态
///
- (void)onSoundChanged:(BOOL)isAudioOpen;
/// 配置截图、录制路径
/// \param cid 通道号
///
/// \param fileType 文件路径类型
///
///
/// returns:
/// 文件路径
- (NSString * _Nonnull)configFilePathWithCid:(NSInteger)cid fileType:(enum LCFilePathType)fileType SWIFT_WARN_UNUSED_RESULT;
/// 截图失败
- (void)onSnapPicFail;
/// 截图成功(通道号:截图路径)
/// \param paths 文件保存路径，格式：[通道号：保存路径]
///
- (void)onSnapPicSuccessWithPaths:(NSDictionary<NSNumber *, NSString *> * _Nonnull)paths;
/// 录制失败
- (void)onRecordFail;
/// 屏幕滑动，调整进度条事件
/// \param dx 水平方向滑动距离及方向，正为向右滑，负为向左滑
///
/// \param dy 上下方向滑动距离及方向，正为向上滑，负为向下滑
///
/// \param channelId 通道号
///
- (void)processPan:(CGFloat)dx dy:(CGFloat)dy channelId:(NSInteger)channelId;
/// 屏幕滑动，调整进度条事件开始
/// \param channelId 通道号
///
- (void)processPanBegin:(NSInteger)channelId;
/// 屏幕滑动，调整进度条事件开始
/// \param channelId 通道号
///
- (void)processPanEnd:(NSInteger)channelId;
@end

@class UILongPressGestureRecognizer;

SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK29LCRecordPluginGestureDelegate_")
@protocol LCRecordPluginGestureDelegate <NSObject>
/// 单击手势响应回调
/// \param livePlugin 单窗口预览组件
///
/// \param gesture 单击手势
///
- (void)onSingleClick:(UITapGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 双击手势响应回调
/// \param livePlugin 单窗口预览组件
///
/// \param gesture 双击手势
///
- (void)onDoubleClick:(UITapGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 左滑手势
- (void)onLeftSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 右滑手势
- (void)onRightSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 上滑手势
- (void)onUpSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 下滑手势
- (void)onDownSwipe:(UISwipeGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
/// 长按手势
- (void)onLongPress:(UILongPressGestureRecognizer * _Nonnull)gesture cid:(NSInteger)cid;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK31LCRecordPluginLogReportDelegate_")
@protocol LCRecordPluginLogReportDelegate <NSObject>
- (void)recordCombinLogReportOnDataAnalysis:(NSDictionary * _Nullable)realStreamData;
- (void)recordCombinLogReportOnStreamLogInfo:(NSString * _Nullable)message;
- (void)recordCombinLogReportOnProgressStatus:(NSString * _Nullable)requestID status:(NSString * _Nullable)status time:(NSString * _Nullable)time;
@end


SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK30LCRecordThreeCamWindowDelegate_")
@protocol LCRecordThreeCamWindowDelegate <NSObject>
/// 画中画模式时,小窗切换
/// \param plugin 组合插件
///
/// \param isMainWindow 切换后小窗是否是主窗口（默认通道0为主窗口）
///
- (void)threeCameraWindow:(LCOpenMediaRecordPlugin * _Nonnull)plugin littleWindow:(BOOL)isMainWindow;
/// 小窗边界颜色设置
/// \param plugin 组合插件
///
/// \param littleWindowBorderColor 暂无含义
///
///
/// returns:
/// 小窗边界颜色
- (UIColor * _Nullable)threeCameraWindow:(LCOpenMediaRecordPlugin * _Nonnull)plugin littleWindowBorderColor:(id _Nullable)littleWindowBorderColor SWIFT_WARN_UNUSED_RESULT;
/// 小窗位置变化回调
/// \param plugin 组合插件
///
/// \param changedLocation 小窗位置象限
///
- (void)threeCameraWindow:(LCOpenMediaRecordPlugin * _Nonnull)plugin subWindow:(LCCastQuadrant)changedLocation;
/// 设置播放器背景图层
/// \param plugin 组合插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 播放窗口覆盖图层
- (UIView * _Nullable)threeCameraWindow:(LCOpenMediaRecordPlugin * _Nonnull)plugin bgViewWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
/// 窗口配置
/// \param plugin 组合插件
///
/// \param channelId 通道号
///
///
/// returns:
/// 配置项
- (LCMediaDoubleCamWindowConfig * _Nullable)threeCameraWindow:(LCOpenMediaRecordPlugin * _Nonnull)plugin windowConfigWith:(NSInteger)channelId SWIFT_WARN_UNUSED_RESULT;
/// 配置画中画模式,主窗口是否是大窗
/// \param plugin 组合插件
///
///
/// returns:
/// 主窗口是否是大窗
- (BOOL)mainWindowIsLargeScreen:(LCOpenMediaRecordPlugin * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, LCRecordVideoType, open) {
  LCRecordVideoTypeCloud = 0,
  LCRecordVideoTypeDevice = 1,
};

@class LCOpenTalkSource;

SWIFT_PROTOCOL("_TtP14LCOpenMediaSDK26LCVisualTalkPlayerDelegate_")
@protocol LCVisualTalkPlayerDelegate <NSObject>
/// 可视对讲成功
/// \param source 对讲参数
///
- (void)onTalkSuccess:(LCOpenTalkSource * _Nonnull)source;
/// 可视对讲开始loading
/// \param source 对讲参数
///
- (void)onTalkLoading:(LCOpenTalkSource * _Nonnull)source;
/// 停止可视对讲
/// \param source 对讲参数
///
- (void)onTalkStop:(LCOpenTalkSource * _Nonnull)source;
/// 对讲失败回调
/// \param source 对讲参数
///
/// \param error 对讲失败错误码
///
/// \param type 错误类型
///
- (void)onTalkFailure:(LCOpenTalkSource * _Nonnull)source failureWith:(NSString * _Nonnull)error type:(NSInteger)type;
@optional
/// 对讲声音分贝回调
/// \param soundDB 声音分别
///
- (void)onSaveSoundDb:(NSInteger)soundDB;
@end


SWIFT_CLASS("_TtC14LCOpenMediaSDK18LCVisualTalkPlugin")
@interface LCVisualTalkPlugin : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@interface LCVisualTalkPlugin (SWIFT_EXTENSION(LCOpenMediaSDK))
/// 设置播放监听
/// \param listener 监听者
///
- (void)setPlayerListener:(id <LCOpenMediaLiveDelegate> _Nonnull)listener;
/// 设置播放器手势监听
/// \param listener 监听者
///
- (void)setGestureListener:(id <LCOpenMediaLiveGestureDelegate> _Nonnull)listener;
- (void)setTalkListener:(id <LCVisualTalkPlayerDelegate> _Nonnull)listener;
/// 播放
/// \param item 视频源信息
///
- (void)playRtspRealWith:(LCOpenLiveSource * _Nonnull)videoSource;
/// 停止播放
/// \param saveLastFrame 是否保留最后一帧(true:保留, false:不保留)
///
- (void)stopRtspReal:(BOOL)saveLastFrame;
/// 继续播放(即将休眠时调用会唤醒设备并继续播放,非播放状态下调用会触发重新拉流)
/// \param windowId 窗口ID
///
- (void)continuePlay;
/// 设置音频开关
/// \param isOn true: 开, false:关
///
- (void)playAudioWithIsCallback:(BOOL)isCallback;
/// 关闭音频
/// \param isCallBack 是否需要回调
///
- (void)stopAudioWithIsCallback:(BOOL)isCallback;
/// 截图
/// \param path 截图保存路径
///
- (void)snapShotWithIsCallback:(BOOL)isCallback;
/// 开始录制视频
/// \param path 录制的视频保存的路径
///
- (void)startRecord;
/// 停止录制视频
- (void)stopRecord;
- (CGFloat)getEZoomScaleWithCid:(NSInteger)cid SWIFT_WARN_UNUSED_RESULT;
- (void)recoverEZooms;
/// 开启/关闭渲染
/// \param enable true:开启 , false:关闭
///
- (void)renderVideoWithEnable:(BOOL)enable;
/// 是否正在录制
///
/// returns:
/// true:正在录制, false:未录制
- (BOOL)isRecording SWIFT_WARN_UNUSED_RESULT;
- (void)configSupportGesture:(LCPlayerSupportGestureType)gestureType;
/// 销毁播放资源(用于资源释放时)
- (void)uninitPlayWindow;
/// 获取本地摄像头渲染画面view
///
/// returns:
/// 本地摄像头渲染画面view
- (UIView * _Nonnull)getPreviewView SWIFT_WARN_UNUSED_RESULT;
/// 切换前置/后置摄像头
/// \param devicePosition 定义详见LCCaptureDevicePosition
///
- (void)toggleCameraWith:(LCCaptureDevicePosition)devicePosition;
/// 获取视频采集传输是否开启
///
/// returns:
/// true/false
- (BOOL)isOpenCamera SWIFT_WARN_UNUSED_RESULT;
/// 开始对讲
/// \param talkSource 对讲信息
///
- (void)startTalkWith:(LCOpenTalkSource * _Nonnull)talkSource;
/// 关闭可视对讲
- (void)stopTalk;
/// 开启变声对讲
/// \param speechMode 详见LCTalkbackSpeechMode定义
///
- (void)changeSpeechMode:(LCTalkbackSpeechMode)speechMode;
/// 开启手机端音频采集
- (void)startAudioCapture;
/// 关闭手机端音频采集
- (void)stopAudioCapture;
/// 开启手机端视频采集
- (void)openCamera;
/// 关闭手机端视频采集
- (void)closeCamera;
/// 打开设备端音频
- (void)playSound;
/// 关闭设备端音频
- (void)stopSound;
/// 是否支持电子放大
/// \param isSupport 是否支持
///
- (void)supportGestureZoom:(BOOL)isSupport;
/// 获取当前播放状态
///
/// returns:
/// 播放状态
- (LCPlayStatus)getPlayState SWIFT_WARN_UNUSED_RESULT;
/// 获取当前拉流类型
///
/// returns:
/// 拉流类型(MTS, P2P, Local, relay)
- (LCVideoStreamMode)getCurrentStreamMode SWIFT_WARN_UNUSED_RESULT;
@end









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

