#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 effective-4.1.50 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef LCADDDEVICEMODULE_SWIFT_H
#define LCADDDEVICEMODULE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import LCBaseModule;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LCAddDeviceModule",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, CodeType, closed) {
  CodeTypeSuccess = 200,
  CodeTypeParseQRCodeFail = 201,
  CodeTypeConnectCloudTimeOut = 202,
  CodeTypeFindDevFail = 203,
  CodeTypeConnectAPFail = 204,
  CodeTypeBindByMe = 205,
  CodeTypeBingByOther = 206,
  CodeTypeInputScError = 207,
  CodeTypeBoxExisted = 208,
  CodeTypeBoxOffline = 209,
  CodeTypeOtherCode = 500,
};


SWIFT_CLASS("_TtC17LCAddDeviceModule21LCAddDeviceLogManager")
@interface LCAddDeviceLogManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LCAddDeviceLogManager * _Nonnull shareInstance;)
+ (LCAddDeviceLogManager * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LCAddDeviceLogModel;

@interface LCAddDeviceLogManager (SWIFT_EXTENSION(LCAddDeviceModule))
/// 开始添加设备log
/// 1、QRCode：扫码添加
/// 2、SN：手输序列号添加
/// 3、NetworkConfig：离线配网
/// result: inputData
- (void)addDeviceStartLogWithModel:(LCAddDeviceLogModel * _Nonnull)model;
/// 添加/配网流程结束log
- (void)addDeviceEndLogWithModel:(LCAddDeviceLogModel * _Nonnull)model;
/// NetSDK接口调用结果,会上报多次，每次数据均保留；(搜索接口只报失败)
- (void)addDeviceNetSDKLogWithModel:(LCAddDeviceLogModel * _Nonnull)model;
/// 初始化结果，会上报多次，每次数据均保留(IOS 新设备IP无效时单独调)
- (void)addDeviceInitLogWithModel:(LCAddDeviceLogModel * _Nonnull)model;
@end

@class NSString;
@class LCDeviceInfoLogModel;

SWIFT_CLASS("_TtC17LCAddDeviceModule19LCAddDeviceLogModel")
@interface LCAddDeviceLogModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull inputData;
@property (nonatomic, copy) NSString * _Nonnull did;
@property (nonatomic, readonly, copy) NSString * _Nonnull time;
@property (nonatomic, copy) NSString * _Nonnull res;
@property (nonatomic) NSInteger errCode;
@property (nonatomic, copy) NSString * _Nonnull dese;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSString * _Nonnull method;
@property (nonatomic, strong) LCDeviceInfoLogModel * _Nonnull deviceInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull resFail;
@property (nonatomic, readonly, copy) NSString * _Nonnull initDev;
- (NSString * _Nonnull)initDev SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull initDevByIP;
- (NSString * _Nonnull)initDevByIP SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum LCDeviceAccessType : NSInteger;
@class LCUserDeviceBindInfo;
@class LCError;
@class LCBindDeviceSuccess;

SWIFT_CLASS("_TtC17LCAddDeviceModule18LCAddDeviceManager")
@interface LCAddDeviceManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LCAddDeviceManager * _Nonnull sharedInstance;)
+ (LCAddDeviceManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull deviceId;
@property (nonatomic, copy) NSString * _Nullable productId;
@property (nonatomic, copy) NSString * _Nonnull deviceModel;
/// 二维码型号
@property (nonatomic, copy) NSString * _Nullable deviceQRCodeModel;
/// 市场型号
@property (nonatomic, copy) NSString * _Nullable deviceMarketModel;
/// imei码【扫描解析出来】
@property (nonatomic, copy) NSString * _Nonnull imeiCode;
/// 设备安全码【国内需要，扫描解析出来】
@property (nonatomic, copy) NSString * _Nullable regCode;
/// NC吗【扫描解析出来】
@property (nonatomic, copy) NSString * _Nullable ncCode;
/// 是否是扫码进入
@property (nonatomic) BOOL isEnterByQrcode;
/// 支持有线添加
- (BOOL)supportWired SWIFT_WARN_UNUSED_RESULT;
/// 当前是有线添加
- (BOOL)isWired SWIFT_WARN_UNUSED_RESULT;
/// 支持软AP添加
- (BOOL)supportSoftAP SWIFT_WARN_UNUSED_RESULT;
/// 当前是软AP添加
- (BOOL)isSoftAP SWIFT_WARN_UNUSED_RESULT;
/// 支持无线添加
- (BOOL)supportWifi SWIFT_WARN_UNUSED_RESULT;
/// 当前是无线添加
- (BOOL)isWireless SWIFT_WARN_UNUSED_RESULT;
/// 是否支持5G频段的wifi
@property (nonatomic) BOOL isSupport5GWifi;
/// 是否支持声波配对方式
@property (nonatomic) BOOL isSupportSoundWave;
/// 是否在线
@property (nonatomic) BOOL isOnline;
/// 是否配件
@property (nonatomic) BOOL isAccessory;
/// 选中的网关
@property (nonatomic, copy) NSString * _Nonnull gatewayId;
/// 从网关入口添加配件时，进入扫码二维码页面，gatewayId被reset了
@property (nonatomic) BOOL gatewayIdNeedReset;
/// 设备接入类型
@property (nonatomic) enum LCDeviceAccessType accessType;
/// 设备品牌
@property (nonatomic, copy) NSString * _Nonnull brand;
/// 视频通道数（包括未接入的）
@property (nonatomic, copy) NSString * _Nonnull channelNum;
/// 设备初始化的密码
@property (nonatomic, copy) NSString * _Nonnull initialPassword;
@property (nonatomic, copy) NSString * _Nullable wifiSSID;
@property (nonatomic, copy) NSString * _Nullable wifiPassword;
/// 是否从离线配网入口进入
@property (nonatomic) BOOL isEntryFromWifiConfig;
/// 能力集
@property (nonatomic, copy) NSString * _Nonnull abilities;
/// 软Ap添加版本
@property (nonatomic, copy) NSString * _Nonnull softAPModeWifiVersion;
/// 软Ap热点名
@property (nonatomic, copy) NSString * _Nonnull softAPModeWifiName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)reset;
- (void)getUnBindDeviceInfoWithDeviceId:(NSString * _Nonnull)deviceId productId:(NSString * _Nullable)productId qrModel:(NSString * _Nullable)qrModel ncCode:(NSString * _Nullable)ncCode marketModel:(NSString * _Nullable)marketModel imeiCode:(NSString * _Nullable)imeiCode success:(void (^ _Nonnull)(LCUserDeviceBindInfo * _Nonnull, BOOL))success failure:(void (^ _Nonnull)(LCError * _Nonnull))failure;
- (void)setupWithDeviceInfo:(LCUserDeviceBindInfo * _Nonnull)deviceInfo;
- (void)refreshDataWithDeviceInfo:(LCUserDeviceBindInfo * _Nonnull)deviceInfo;
- (void)getDeviceStatusWithSuccess:(void (^ _Nonnull)(LCUserDeviceBindInfo * _Nonnull))success failure:(void (^ _Nonnull)(LCError * _Nonnull))failure;
- (void)stopGetDeviceStatus;
/// 绑定设备
/// \param devicePassword 设备密码
///
/// \param code 安全码【国内】
///
/// \param deviceKey 设备随机码【国内】
///
/// \param success 成功，返回相应的信息 LCBindDeviceSuccess
///
/// \param failure 失败
///
- (void)bindDeviceWithDevicePassword:(NSString * _Nonnull)devicePassword code:(NSString * _Nullable)code deviceKey:(NSString * _Nullable)deviceKey success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(LCError * _Nonnull))failure;
- (void)addPlicyWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(LCError * _Nonnull))failure;
- (void)getDeviceInfoAfterBindWithSuccess:(void (^ _Nonnull)(LCBindDeviceSuccess * _Nonnull))success failure:(void (^ _Nonnull)(LCError * _Nonnull))failure;
@end


@interface LCAddDeviceManager (SWIFT_EXTENSION(LCAddDeviceModule))
- (void)autoConnectHotSpotWithWifiName:(NSString * _Nullable)ssid password:(NSString * _Nullable)password completion:(void (^ _Nonnull)(BOOL))completion;
@end


SWIFT_CLASS("_TtC17LCAddDeviceModule17LCAddDeviceModule")
@interface LCAddDeviceModule : NSObject <LCModuleProtocol>
- (void)moduleInit;
- (void)moduleCustomEvent:(NSString * _Null_unspecified)eventname userInfo:(NSDictionary * _Null_unspecified)userInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC17LCAddDeviceModule13LCAppWifiCell")
@interface LCAppWifiCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17LCAddDeviceModule18LCAutoKeyboardView")
@interface LCAutoKeyboardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@protocol LCCycleTimerViewDelegate;
@class UIColor;

SWIFT_CLASS("_TtC17LCAddDeviceModule16LCCycleTimerView")
@interface LCCycleTimerView : UIView
@property (nonatomic, weak) id <LCCycleTimerViewDelegate> _Nullable delegate;
/// 超时的闭包，外层需要注意循环引用的问题
@property (nonatomic, copy) void (^ _Nullable timeout)(void);
/// 线条宽度
@property (nonatomic) CGFloat progressWidth;
/// 进度条底色
@property (nonatomic, strong) UIColor * _Nonnull progressBackgroundColor;
/// 进度条前景颜色
@property (nonatomic, strong) UIColor * _Nonnull progressForegroundColor;
/// 倒计时总时间
@property (nonatomic) NSInteger maxTime;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)startTimer;
- (void)stopTimer;
- (void)pauseTimer;
- (void)resumeTimer;
@end


SWIFT_PROTOCOL("_TtP17LCAddDeviceModule24LCCycleTimerViewDelegate_")
@protocol LCCycleTimerViewDelegate <NSObject>
- (void)cycleTimerViewTimeoutWithCycleView:(LCCycleTimerView * _Nonnull)cycleView;
- (void)cycleTimerViewWithCycleView:(LCCycleTimerView * _Nonnull)cycleView tick:(NSInteger)tick;
@end

typedef SWIFT_ENUM(NSInteger, LCDeviceAccessType, closed) {
  LCDeviceAccessTypeP2p = 0,
  LCDeviceAccessTypeEasy4ip = 1,
  LCDeviceAccessTypePaas = 2,
};


SWIFT_CLASS("_TtC17LCAddDeviceModule20LCDeviceAddGuideCell")
@interface LCDeviceAddGuideCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17LCAddDeviceModule22LCIotWiFiUnSupportView")
@interface LCIotWiFiUnSupportView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP17LCAddDeviceModule27LCOfflineWifiConfigProtocol_")
@protocol LCOfflineWifiConfigProtocol <LCServiceProtocol>
/// 根据设备id和设备密码更新服务端的设备密码
/// \param deviceId 设备id
///
/// \param devicePassword 设备密码
///
- (void)updateDeviceInfoWithDeviceId:(NSString * _Nonnull)deviceId byPassword:(NSString * _Nonnull)devicePassword;
/// 保存设备密码至本地缓存
/// \param deviceId 设备id
///
/// \param password 设备密码
///
- (void)savePasswordInCacheWithDeviceId:(NSString * _Nonnull)deviceId password:(NSString * _Nonnull)password;
/// 成功后跳转处理：海外至主页
- (void)backToMainController;
@end



@class UIFont;

@interface UILabel (SWIFT_EXTENSION(LCAddDeviceModule))
/// 设置Label的富文本
/// \param text 需要设置的文字
///
/// \param font 字体大小
///
/// \param lineSpace 行距
///
/// \param alignment 对齐方式
///
- (void)lc_setAttributedTextWithText:(NSString * _Nullable)text font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color lineSpace:(CGFloat)lineSpace alignment:(NSTextAlignment)alignment;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
